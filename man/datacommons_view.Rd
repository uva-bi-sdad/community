% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/datacommons_view.R
\name{datacommons_view}
\alias{datacommons_view}
\title{Interact with a Data Commons View}
\usage{
datacommons_view(commons, name, output = NULL, ..., variables = NULL,
  ids = NULL, files = NULL, run_after = NULL, run_before = NULL,
  measure_info = list(), remote = NULL, url = NULL, children = list(),
  execute = TRUE, prefer_repo = TRUE, preselect_files = FALSE,
  refresh_map = FALSE, use_manifest = FALSE, overwrite = FALSE,
  verbose = TRUE)
}
\arguments{
\item{commons}{Path to the data commons project.}

\item{name}{Name of the view (it's directory in the project's \code{"views"} directory).
Defaults to the first view.}

\item{output}{Path to a site project's main directory.}

\item{...}{Passes arguments to \code{\link{data_reformat_sdad}} if the view is to be executed.}

\item{variables}{A vector of variables, to be added to the view's \code{view.json} file.}

\item{ids}{A vector of ids, to be added to the view's \code{view.json} file.}

\item{files}{A regular expression string used to filter files containing \code{variables}.}

\item{run_after}{Path to a script to be sourced after refreshing the view, or code to
be added to such a script (e.g., \code{"../data_site/build.R"}).}

\item{run_before}{Path to a script to be sourced before refreshing the view, or code to
be added to such a script.}

\item{measure_info}{A list of variable metadata to include in the \code{measure_info.json}
file created from such files in each data repository (such as general entries like
\code{"_references"}). These will supersede any entries of the same name found in data repositories.}

\item{remote}{Name of the view's GitHub repository (\code{"username/reponame"}).}

\item{url}{URL of the view's site; defaults to the GitHub Pages URL associated with \code{remote}
if provided (\code{"https://username.github.io/reponame"}).}

\item{children}{A list of child sites associated with the view. Each entry should contain at least a
\code{remote} entry (GitHub repository, including user name and repo name), and optionally \code{name}
and \code{url} (link to the served site), which will otherwise be derived from \code{remote}.}

\item{execute}{Logical; if \code{FALSE}, will create/update, but not run the view.}

\item{prefer_repo}{Logical; if \code{FALSE}, will prefer distribution files (such as from Dataverse)
over those in the repositories.}

\item{preselect_files}{Logical; if \code{TRUE}, will select files by ID coverage before processing them,
which can save time, but might miss data spread across multiple files.}

\item{refresh_map}{Logical; if \code{TRUE}, overwrites any existing map files.}

\item{use_manifest}{Logical; if \code{TRUE}, will search for manifest files in each repository to
extract measure information from. These should have \code{data} entries with object arrays containing a
\code{measure_info} entry (e.g., \code{'{"data: [{"measure_info": [{...}]}]"}'}).}

\item{overwrite}{Logical; if \code{TRUE}, reformatted files in \code{output}.}

\item{verbose}{Logical; if \code{FALSE}, will not show status messages.}
}
\value{
An invisible version of the view list (the view's \code{view.json} file).
}
\description{
Add, edit, or refresh a view within a data commons project.
}
\examples{
\dontrun{
# create a view within a data commons project
datacommons_view(".", "view_name", variables = c("variable_a", "variable_b"))

# refresh that view
datacommons_view(".", "view_name")
}
}
